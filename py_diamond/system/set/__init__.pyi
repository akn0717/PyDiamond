# -*- coding: Utf-8 -*
# Copyright (c) 2021-2022, Francis Clairicia-Rose-Claire-Josephine
#
#

__all__ = [
    "OrderedSet",
    "OrderedSetIndexError",
    "OrderedWeakSet",
]

from typing import AbstractSet as Set, Any, Callable, Iterable, Iterator, MutableSet, Sequence, SupportsIndex, TypeVar, overload
from weakref import WeakSet

from _typeshed import Self, SupportsRichComparison

_T = TypeVar("_T")

class OrderedSetIndexError(KeyError, IndexError): ...

class OrderedSet(MutableSet[_T], Sequence[_T]):
    def __init__(self, data: Iterable[_T] | None = ..., /) -> None: ...
    @classmethod
    def _from_iterable(cls: type[Self], it: Iterable[_T]) -> Self: ...
    @overload
    def __getitem__(self, index: int, /) -> _T: ...
    @overload
    def __getitem__(self: Self, index: slice, /) -> Self: ...
    def copy(self: Self) -> Self: ...
    def __copy__(self: Self) -> Self: ...
    def __deepcopy__(self: Self, memo: dict[int, Any] | None = ...) -> Self: ...
    def add(self, value: _T) -> None: ...
    def update(self, sequence: Iterable[_T]) -> None: ...
    def index(self, value: _T, start: int = ..., stop: int = ...) -> int: ...
    def count(self, value: _T) -> int: ...
    def __delitem__(self, index: int) -> None: ...
    def pop(self, index: int = ...) -> _T: ...
    def discard(self, value: _T) -> None: ...
    def remove(self, value: _T) -> None: ...
    def clear(self) -> None: ...
    def reverse(self) -> None: ...
    def sort(self, *, key: Callable[[_T], SupportsRichComparison] | None = ..., reverse: bool = ...) -> None: ...
    def isdisjoint(self, other: Iterable[_T]) -> bool: ...
    def __contains__(self, __x: object, /) -> bool: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __reversed__(self) -> Iterator[_T]: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __reduce_ex__(self, protocol: SupportsIndex, /) -> tuple[Any, ...]: ...
    def __eq__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def issubset(self, other: Set[_T] | Sequence[_T]) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def issuperset(self, other: Set[_T] | Sequence[_T]) -> bool: ...
    def __or__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...  # type: ignore[override]
    def __ror__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def __ior__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...  # type: ignore[override]
    def union(self: Self, *others: Iterable[_T]) -> Self: ...
    def __and__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def __rand__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def __iand__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def intersection(self: Self, *others: Iterable[_T]) -> Self: ...
    def intersection_update(self, *others: Iterable[_T]) -> None: ...
    def __sub__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def __rsub__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def __isub__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def difference(self: Self, *others: Iterable[_T]) -> Self: ...
    def difference_update(self, *others: Iterable[_T]) -> None: ...
    def __xor__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...  # type: ignore[override]
    def __rxor__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def __ixor__(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...  # type: ignore[override]
    def symmetric_difference(self: Self, other: Set[_T] | Sequence[_T]) -> Self: ...
    def symmetric_difference_update(self, other: Set[_T] | Sequence[_T]) -> None: ...

class OrderedWeakSet(WeakSet[_T], Sequence[_T]):
    @overload
    def __getitem__(self, index: int, /) -> _T: ...
    @overload
    def __getitem__(self: Self, index: slice, /) -> Self: ...
    def __delitem__(self, index: int) -> None: ...
